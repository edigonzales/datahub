package ch.so.agi.datahub.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

import ch.so.agi.datahub.cayenne.CoreOrganisation;
import ch.so.agi.datahub.cayenne.CoreUser;

/**
 * Class _CoreOrganisationUser was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CoreOrganisationUser extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String T_ID_PK_COLUMN = "t_id";

    public static final EntityProperty<CoreOrganisation> CORE_ORGANISATION = PropertyFactory.createEntity("coreOrganisation", CoreOrganisation.class);
    public static final EntityProperty<CoreUser> CORE_USER = PropertyFactory.createEntity("coreUser", CoreUser.class);


    protected Object coreOrganisation;
    protected Object coreUser;

    public void setCoreOrganisation(CoreOrganisation coreOrganisation) {
        setToOneTarget("coreOrganisation", coreOrganisation, true);
    }

    public CoreOrganisation getCoreOrganisation() {
        return (CoreOrganisation)readProperty("coreOrganisation");
    }

    public void setCoreUser(CoreUser coreUser) {
        setToOneTarget("coreUser", coreUser, true);
    }

    public CoreUser getCoreUser() {
        return (CoreUser)readProperty("coreUser");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "coreOrganisation":
                return this.coreOrganisation;
            case "coreUser":
                return this.coreUser;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "coreOrganisation":
                this.coreOrganisation = val;
                break;
            case "coreUser":
                this.coreUser = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.coreOrganisation);
        out.writeObject(this.coreUser);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.coreOrganisation = in.readObject();
        this.coreUser = in.readObject();
    }

}
