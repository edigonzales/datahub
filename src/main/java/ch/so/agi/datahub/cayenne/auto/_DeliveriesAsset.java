package ch.so.agi.datahub.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import ch.so.agi.datahub.cayenne.DeliveriesDelivery;

/**
 * Class _DeliveriesAsset was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DeliveriesAsset extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String T_ID_PK_COLUMN = "t_id";

    public static final StringProperty<String> ATYPE = PropertyFactory.createString("atype", String.class);
    public static final StringProperty<String> ORIGINALFILENAME = PropertyFactory.createString("originalfilename", String.class);
    public static final StringProperty<String> SANITIZEDFILENAME = PropertyFactory.createString("sanitizedfilename", String.class);
    public static final EntityProperty<DeliveriesDelivery> DELIVERIES_DELIVERY = PropertyFactory.createEntity("deliveriesDelivery", DeliveriesDelivery.class);

    protected String atype;
    protected String originalfilename;
    protected String sanitizedfilename;

    protected Object deliveriesDelivery;

    public void setAtype(String atype) {
        beforePropertyWrite("atype", this.atype, atype);
        this.atype = atype;
    }

    public String getAtype() {
        beforePropertyRead("atype");
        return this.atype;
    }

    public void setOriginalfilename(String originalfilename) {
        beforePropertyWrite("originalfilename", this.originalfilename, originalfilename);
        this.originalfilename = originalfilename;
    }

    public String getOriginalfilename() {
        beforePropertyRead("originalfilename");
        return this.originalfilename;
    }

    public void setSanitizedfilename(String sanitizedfilename) {
        beforePropertyWrite("sanitizedfilename", this.sanitizedfilename, sanitizedfilename);
        this.sanitizedfilename = sanitizedfilename;
    }

    public String getSanitizedfilename() {
        beforePropertyRead("sanitizedfilename");
        return this.sanitizedfilename;
    }

    public void setDeliveriesDelivery(DeliveriesDelivery deliveriesDelivery) {
        setToOneTarget("deliveriesDelivery", deliveriesDelivery, true);
    }

    public DeliveriesDelivery getDeliveriesDelivery() {
        return (DeliveriesDelivery)readProperty("deliveriesDelivery");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "atype":
                return this.atype;
            case "originalfilename":
                return this.originalfilename;
            case "sanitizedfilename":
                return this.sanitizedfilename;
            case "deliveriesDelivery":
                return this.deliveriesDelivery;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "atype":
                this.atype = (String)val;
                break;
            case "originalfilename":
                this.originalfilename = (String)val;
                break;
            case "sanitizedfilename":
                this.sanitizedfilename = (String)val;
                break;
            case "deliveriesDelivery":
                this.deliveriesDelivery = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.atype);
        out.writeObject(this.originalfilename);
        out.writeObject(this.sanitizedfilename);
        out.writeObject(this.deliveriesDelivery);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.atype = (String)in.readObject();
        this.originalfilename = (String)in.readObject();
        this.sanitizedfilename = (String)in.readObject();
        this.deliveriesDelivery = in.readObject();
    }

}
