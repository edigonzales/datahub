package ch.so.agi.datahub.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import ch.so.agi.datahub.cayenne.CoreOrganisation;
import ch.so.agi.datahub.cayenne.CoreTheme;
import ch.so.agi.datahub.cayenne.DeliveriesDelivery;

/**
 * Class _CoreOperat was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CoreOperat extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String T_ID_PK_COLUMN = "t_id";

    public static final StringProperty<String> OPERATID = PropertyFactory.createString("operatid", String.class);
    public static final EntityProperty<CoreOrganisation> CORE_ORGANISATION = PropertyFactory.createEntity("coreOrganisation", CoreOrganisation.class);
    public static final EntityProperty<CoreTheme> CORE_THEME = PropertyFactory.createEntity("coreTheme", CoreTheme.class);
    public static final ListProperty<DeliveriesDelivery> DELIVERIES_DELIVERIES = PropertyFactory.createList("deliveriesDeliveries", DeliveriesDelivery.class);

    protected String operatid;

    protected Object coreOrganisation;
    protected Object coreTheme;
    protected Object deliveriesDeliveries;

    public void setOperatid(String operatid) {
        beforePropertyWrite("operatid", this.operatid, operatid);
        this.operatid = operatid;
    }

    public String getOperatid() {
        beforePropertyRead("operatid");
        return this.operatid;
    }

    public void setCoreOrganisation(CoreOrganisation coreOrganisation) {
        setToOneTarget("coreOrganisation", coreOrganisation, true);
    }

    public CoreOrganisation getCoreOrganisation() {
        return (CoreOrganisation)readProperty("coreOrganisation");
    }

    public void setCoreTheme(CoreTheme coreTheme) {
        setToOneTarget("coreTheme", coreTheme, true);
    }

    public CoreTheme getCoreTheme() {
        return (CoreTheme)readProperty("coreTheme");
    }

    public void addToDeliveriesDeliveries(DeliveriesDelivery obj) {
        addToManyTarget("deliveriesDeliveries", obj, true);
    }

    public void removeFromDeliveriesDeliveries(DeliveriesDelivery obj) {
        removeToManyTarget("deliveriesDeliveries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DeliveriesDelivery> getDeliveriesDeliveries() {
        return (List<DeliveriesDelivery>)readProperty("deliveriesDeliveries");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "operatid":
                return this.operatid;
            case "coreOrganisation":
                return this.coreOrganisation;
            case "coreTheme":
                return this.coreTheme;
            case "deliveriesDeliveries":
                return this.deliveriesDeliveries;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "operatid":
                this.operatid = (String)val;
                break;
            case "coreOrganisation":
                this.coreOrganisation = val;
                break;
            case "coreTheme":
                this.coreTheme = val;
                break;
            case "deliveriesDeliveries":
                this.deliveriesDeliveries = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.operatid);
        out.writeObject(this.coreOrganisation);
        out.writeObject(this.coreTheme);
        out.writeObject(this.deliveriesDeliveries);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.operatid = (String)in.readObject();
        this.coreOrganisation = in.readObject();
        this.coreTheme = in.readObject();
        this.deliveriesDeliveries = in.readObject();
    }

}
