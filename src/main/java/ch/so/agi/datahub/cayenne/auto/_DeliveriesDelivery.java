package ch.so.agi.datahub.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import ch.so.agi.datahub.cayenne.CoreOperat;
import ch.so.agi.datahub.cayenne.CoreUser;
import ch.so.agi.datahub.cayenne.DeliveriesAsset;

/**
 * Class _DeliveriesDelivery was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DeliveriesDelivery extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String T_ID_PK_COLUMN = "t_id";

    public static final DateProperty<LocalDateTime> DELIVERYDATE = PropertyFactory.createDate("deliverydate", LocalDateTime.class);
    public static final StringProperty<String> JOBID = PropertyFactory.createString("jobid", String.class);
    public static final EntityProperty<CoreOperat> CORE_OPERAT = PropertyFactory.createEntity("coreOperat", CoreOperat.class);
    public static final EntityProperty<CoreUser> CORE_USER = PropertyFactory.createEntity("coreUser", CoreUser.class);
    public static final ListProperty<DeliveriesAsset> DELIVERIES_ASSETS = PropertyFactory.createList("deliveriesAssets", DeliveriesAsset.class);

    protected LocalDateTime deliverydate;
    protected String jobid;

    protected Object coreOperat;
    protected Object coreUser;
    protected Object deliveriesAssets;

    public void setDeliverydate(LocalDateTime deliverydate) {
        beforePropertyWrite("deliverydate", this.deliverydate, deliverydate);
        this.deliverydate = deliverydate;
    }

    public LocalDateTime getDeliverydate() {
        beforePropertyRead("deliverydate");
        return this.deliverydate;
    }

    public void setJobid(String jobid) {
        beforePropertyWrite("jobid", this.jobid, jobid);
        this.jobid = jobid;
    }

    public String getJobid() {
        beforePropertyRead("jobid");
        return this.jobid;
    }

    public void setCoreOperat(CoreOperat coreOperat) {
        setToOneTarget("coreOperat", coreOperat, true);
    }

    public CoreOperat getCoreOperat() {
        return (CoreOperat)readProperty("coreOperat");
    }

    public void setCoreUser(CoreUser coreUser) {
        setToOneTarget("coreUser", coreUser, true);
    }

    public CoreUser getCoreUser() {
        return (CoreUser)readProperty("coreUser");
    }

    public void addToDeliveriesAssets(DeliveriesAsset obj) {
        addToManyTarget("deliveriesAssets", obj, true);
    }

    public void removeFromDeliveriesAssets(DeliveriesAsset obj) {
        removeToManyTarget("deliveriesAssets", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DeliveriesAsset> getDeliveriesAssets() {
        return (List<DeliveriesAsset>)readProperty("deliveriesAssets");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "deliverydate":
                return this.deliverydate;
            case "jobid":
                return this.jobid;
            case "coreOperat":
                return this.coreOperat;
            case "coreUser":
                return this.coreUser;
            case "deliveriesAssets":
                return this.deliveriesAssets;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "deliverydate":
                this.deliverydate = (LocalDateTime)val;
                break;
            case "jobid":
                this.jobid = (String)val;
                break;
            case "coreOperat":
                this.coreOperat = val;
                break;
            case "coreUser":
                this.coreUser = val;
                break;
            case "deliveriesAssets":
                this.deliveriesAssets = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.deliverydate);
        out.writeObject(this.jobid);
        out.writeObject(this.coreOperat);
        out.writeObject(this.coreUser);
        out.writeObject(this.deliveriesAssets);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.deliverydate = (LocalDateTime)in.readObject();
        this.jobid = (String)in.readObject();
        this.coreOperat = in.readObject();
        this.coreUser = in.readObject();
        this.deliveriesAssets = in.readObject();
    }

}
